scalar Date

type Service {
  id: String!
  name: String!
  password: String!
  email: String!
  username: String
  phoneNumber: String
  icon: String
  twofactor: Boolean
  creationTime: Date
}

input CreateServiceInput {
  id: String!
  name: String!
  password: String!
  email: String!
  username: String
  phoneNumber: String
  icon: String
  twofactor: Boolean
}

type User {
  id: String!
  email: String!
  username: String!
  password: String!
  secureCode: String!
  services: [Service]
}

type AuthUser {
  jwt: String!
  user: User!
}

input CreateUserInput {
  id: String!
  username: String!
  email: String!
  password: String!
  secureCode: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Query {
  hello: String!
  getService(id: String!): Service
  getServices: [Service]

  getAllUsers: [User!]
  getCurrentUserInfo(email: String): User
  loginUser(loginUserInput: LoginUserInput!): AuthUser
}

type Mutation {
  createService(createServiceInput: CreateServiceInput!): Service
  createUser(createUserInput: CreateUserInput!): User
  removeService(id: String): Service
}
